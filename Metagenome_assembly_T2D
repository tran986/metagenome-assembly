#input: bbduk_downstream files (pair-ended sequence)
#output: checkm

[SMPS,PAIR] = glob_wildcards("bbduk/T2D_2/{sample}_{pair}.fastq.gz")
print(list(set(SMPS)))

rule assembly:
  input:
    in1="bbduk/T2D_2/{sample}_1.fastq.gz",
    in2="bbduk/T2D_2/{sample}_2.fastq.gz"
  output:
    directory("megahit/T2D_2/{sample}")
  conda:
    "env.yaml"
  shell:
    "megahit -1 {input.in1} -2 {input.in2} -t 12 -o {output}"

rule all_bwa:
   input:expand("bwa_index/T2D_2/{sample}/", sample=SMPS)

rule bwa_index:
   input:
     "megahit/T2D_2/{sample}/final.contigs.fa",
   output:
     "bwa_index/T2D_2/{sample}/",
   conda:
     "env.yaml",
   shell:
     "bwa index {input} > {output}"

rule all_samtools:
   input:expand("samtools/T2D_2/{sample}.bam", sample=SMPS)

rule samtools:
   input:
     fasta="megahit/T2D_2/{sample}/final.contigs.fa",
     r1="bbduk/T2D_2/{sample}_1.fastq.gz",
     r2="bbduk/T2D_2/{sample}_2.fastq.gz"
   output:
     "samtools/T2D_2/{sample}.bam"
   conda:
     "env.yaml"
   shell:
     "bwa mem {input.fasta} {input.r1} {input.r2} > samtools view -1 -bS > {output}"

rule all_metabat:
   input:expand("metabat/T2D_2/{sample}/bin/", sample=SMPS)

rule metabat:
   input:
    fasta="megahit/T2D_2/{sample}/final.contigs.fa",
    bam="samtools/T2D_2/{sample}.bam"
   output:
    "metabat/T2D_2/{sample}/bin/"
   conda:"env.yaml"
   shell:
     "runMetaBat.sh -i {input.fasta} {input.bam} -o {output}"

"""
rule checkm:
   input:
    fasta="maxbin/T2D_2/{sample}",
    ms="
   output:
    dir="checkm/T2D_2/{sample}",
    file="checkm/T2D_2/{sample}/quality_JP4D.tsv"
   conda:
    "env.yaml"
   shell:
     """
     checkm taxonomy_wf domain Bacteria -x fasta {input.fasta} {output.dir}
     checkm qa {input.ms} {output.dir} --file {output.file} --tab_table -o 2
     """
rule dram:
   input:
   output:
   conda:
   shell:
"""    
#snakemake --profile config all_binn --slurm -c 20 -j 1 --rerun-incomplete

#rules to be written: checkm, dram
 

 

